--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../widget.h"
#include "../../file.lh"

#define PATH_SMALL "/ICONS/48px/"
#define PATH_LARGE "/ICONS/72px/"

local name = "EL_Sli";
local options = {
  { "Name", STRING}
};

local config = nil;
local iconWidget = nil;

local iconTable = {}; -- hash table for icon bitmaps, only hash based access

local function loadIcon(filename)
  if (iconTable[filename]) then
    TRACE("cache hit for: ", filename);
    return iconTable[filename], true;
  end
  local icon = Bitmap.open(filename);
  local ok = true;
  if (icon) then
    local w, h = Bitmap.getSize(icon);
    if (w == 0) then
      TRACE("missing image: ", filename);
      ok = false;
    else
      TRACE("cache insert: ", filename);
      iconTable[filename] = icon;
    end
  end
  return icon, ok;
end


local function create(zone, options)
  load();
  collectgarbage();

  if (errorCode > 0) then
    return {};
  end

  local widget = __libI.initWidget(zone, options);
  collectgarbage();

  __libI = nil; -- free memory

  collectgarbage();

  local name = options.Name;
  if (name) then
#ifdef USE_NEW_STRING_OPTION
    if not (type(name) == "string") then
      TRACE("not string2: ", name);
      name =  __libU.optionString(name);
    end
#else
    name = __libU.optionString(options.Name);
#endif
  end

  config = loadFile(BASE_DIR .. "/RADIO/SLIDER/", name);
  if (config) then
    config = config();

    if not (config.name) then
      config.name = "unnamed";
    end
  end

  if (errorCode > 0) then
    return {};
  end

  iconWidget = loadIcon(BASE_DIR .. PATH_SMALL .. "expand.png");

  return widget;
end

local function inside(touch, area)
  TRACE3("inside:", touch.x, touch.y, area.x, area.x + area.w, area.y, area.y + area.h);
  if ((touch.x >= area.x) and (touch.x < (area.x + area.w)) and (touch.y >= area.y) and (touch.y <= (area.y + area.h))) then
    return true;
  end
  return false;
end

local function displaySliderVertical(slider, widget, event, touch)
  lcd.drawFilledRectangle(slider.x, slider.y, slider.w, slider.h, lcd.RGB(slider.data.color));
  lcd.drawRectangle(slider.x, slider.y, slider.w, slider.h, COLOR_THEME_PRIMARY2);
  lcd.drawText(slider.x, slider.y - 1.1 * widget[W_FontHSmall], slider.data.name, COLOR_THEME_PRIMARY1);

  local value = -1 * getShmVar(slider.data.shm);
  local position = slider.h * (value / 1024 + 1) / 2 + slider.y;

  lcd.drawFilledRectangle(slider.x, position - 5, slider.w, 10, COLOR_THEME_PRIMARY1);

  if (event == EVT_TOUCH_SLIDE) then
    if (inside(touch, slider)) then
      local d = (touch.y - slider.y) / slider.h;
      local v = -1 * (d - 0.5) * 2048;
      TRACE3("slider:", slider.data.name, v);
      setShmVar(slider.data.shm, v);
      return 1;
    end
  elseif (event == EVT_TOUCH_TAP) then
    if (touch.tapCount == 2) then
      if (inside(touch, slider)) then
        setShmVar(slider.data.shm, 0);
        return 2;
      end
    end
  end
  return 0;
end

local function displaySliderHorizontal(slider, widget, event, touch)
  lcd.drawFilledRectangle(slider.x, slider.y, slider.w, slider.h, lcd.RGB(slider.data.color));
  lcd.drawRectangle(slider.x, slider.y, slider.w, slider.h, COLOR_THEME_PRIMARY2);
  lcd.drawText(slider.x, slider.y - 1.1 * widget[W_FontHSmall], slider.data.name, COLOR_THEME_PRIMARY1);

  local value = -1 * getShmVar(slider.data.shm);
  local position = slider.w * (value / 1024 + 1) / 2 + slider.x;

  lcd.drawFilledRectangle(position - 5, slider.y, 10, slider.h, COLOR_THEME_PRIMARY1);

  if (event == EVT_TOUCH_SLIDE) then
    if (inside(touch, slider)) then
      local d = (touch.x - slider.x) / slider.w;
      local v = -1 * (d - 0.5) * 2048;
      TRACE3("slider:", slider.data.name, v);
      setShmVar(slider.data.shm, v);
      return 1;
    end
  elseif (event == EVT_TOUCH_TAP) then
    if (touch.tapCount == 2) then
      if (inside(touch, slider)) then
        setShmVar(slider.data.shm, 0);
        return 2;
      end
    end
  end
  return 0;
end

local function displayAllSlider(config, widget, event, touch)
  TRACE3("Display All Slider");

  if (config.layout == "V") then
    if (#config.slider > 0) then
      local width = widget[W_Width] / ( 2 * #config.slider + 1);
      local yborder = widget[W_Height] * 0.1; 
      local height = widget[W_Height]  - 2 * yborder;
  
      local y =  yborder; 
  
      for si, sl in ipairs(config.slider) do
        local slider = {
           x = (2 * (si - 1)  + 1 ) * width;
           y = yborder;
           w = width;
           h = height;
           data = sl;
        };
        if (displaySliderVertical(slider, widget, event, touch) > 0) then
          event = 0;
        end
      end
    end      
  end
  if (config.layout == "H") then
    if (#config.slider > 0) then
      local height = widget[W_Height] / ( 2 * #config.slider + 1);
      local xborder = widget[W_Width] * 0.1; 
      local width = widget[W_Width] - 2 * xborder;
  
      local y =  yborder; 
  
      for si, sl in ipairs(config.slider) do
        local slider = {
           x = xborder;
           y = (2 * (si - 1)  + 1 ) * height;
           w = width;
           h = height;
           data = sl;
        };
        if (displaySliderHorizontal(slider, widget, event, touch) > 0) then
          event = 0;
        end
      end
    end          
  end
  return 0;
end

local function update(widget, options)
  widget[W_Options] = options;
end

local function background(widget)
  if (errorCode == 0) then
  end
end

local function refresh(widget, event, touch)
  __libD.updateWidgetDimensions(widget, event);
  if (errorCode == 0) and (config) then
    if (widget[W_Width] <= (LCD_W / 2)) then
      if (iconWidget) then
        lcd.drawBitmap(iconWidget, widget[W_X], widget[W_Y] + widget[W_Height] / 2 - 24);        
      end
      lcd.drawText(widget[W_X] + 60, widget[W_Y] + widget[W_Height] / 2 - widget[W_FontHLarge], config.name, MIDSIZE);
    else
      local error = displayAllSlider(config, widget, event, touch);
      if (error > 0) then
        lcd.drawText(widget[W_X], widget[W_Y], "Error: " .. error, DBLSIZE);        
      end
    end
  else
    lcd.drawText(widget[W_X], widget[W_Y], "Error: " .. errorCode, DBLSIZE);
  end
end

return { 
  name=name,
  options=options,
  create=create,
  update=update,
  refresh=refresh,
  background=background
};
