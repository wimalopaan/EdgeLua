--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../global.h"

local function isDigit(v)
  return (v >= string.byte("0")) and (v <= string.byte("9"));
end

local function isLetter(v)
  return (v >= string.byte("A") and (v <= string.byte("Z"))) or (v >= string.byte("a") and (v <= string.byte("z")));
end

local function nthChar(n, v)
  local c = bit32.extract(v, n * 8, 8);
  if (isDigit(c) or isLetter(c)) then
    return string.char(c);
  end
  return nil;
end

local function optionString(option)
  local s = "";
  for i = 0,3 do
    local c = nthChar(i, option);
    if (c) then
      s = s .. c;
    else
      return s;
    end;
  end
  return s
end


local function serialize(table, filename) 
    if type(table) == "table" then
        io.write("{\n")
        for k,v in pairs(o) do
          io.write("  ", k, " = ")
          serialize(v)
          io.write(",\n")
        end
        io.write("}\n")
      else
        error("cannot serialize a " .. type(o))
      end
end

local function saveValues(menu, filename, state)
end

local function initValues(menu, filename)
end

local debugText = {};

local function initDebugTextBW() 
  debugText[DEBUG_TEXT_Version] = "Vers:";
  debugText[DEBUG_TEXT_GetFieldSL] = "GFLS:";
  debugText[DEBUG_TEXT_GetSwitchId] = "SwId:";
  debugText[DEBUG_TEXT_Radio] = "Rad:";
  debugText[DEBUG_TEXT_Shm] = "Shm:";
  debugText[DEBUG_TEXT_StickySwitch] = "SSw:";
  debugText[DEBUG_TEXT_TrimSwitchId] = "TrSw:";
  debugText[DEBUG_TEXT_ValueStorage] = "VSto:";
end

local function initDebugTextColor() 
  debugText[DEBUG_TEXT_Version] = "Version:";
  debugText[DEBUG_TEXT_GetFieldSL] = "SwitchID LS:";
  debugText[DEBUG_TEXT_GetSwitchId] = "GetSwitchId:";
  debugText[DEBUG_TEXT_Radio] = "Radio:";
  debugText[DEBUG_TEXT_Shm] = "SharedMem:";
  debugText[DEBUG_TEXT_StickySwitch] = "SetStickySw:";
  debugText[DEBUG_TEXT_TrimSwitchId] = "TrimSwitch:";
  debugText[DEBUG_TEXT_ValueStorage] = "ValueStorage:";
end

local function displayDebugBW(widget) 
  local y = widget[W_Y];
  local x1 = widget[W_X];
  local x2 = x1 + widget[W_Width] / 4;
  local x3 = x1 + widget[W_Width] / 2;
  local x4 = x1 + 3 * widget[W_Width] / 4;
  #ifdef DEBUG
      lcd.drawText(x1, y, debugText[DEBUG_TEXT_Version] .. VERSION .. " (dbg)", SMLSIZE);
  #else
      lcd.drawText(x1, y, debugText[DEBUG_TEXT_Version] .. VERSION, SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_Radio] , SMLSIZE);    
  local ver, radio, maj, minor, rev, osname = getVersion();
  if (osname) then
      lcd.drawText(x2, y, "ETx " .. radio .. " " .. maj .. "." .. minor .. "." .. rev, SMLSIZE);
  else
      lcd.drawText(x2, y, "OTx " .. radio .. " " .. maj .. "." .. minor .. "." .. rev, SMLSIZE);
  end
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_ValueStorage], SMLSIZE);
  #ifdef USE_VALUE_STORAGE
      lcd.drawText(x2, y, "y", SMLSIZE);
  #else 
      lcd.drawText(x2, y, "n", SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_TrimSwitchId], SMLSIZE);
  #ifdef USE_TRIM_NAMES
      local id = getFieldInfo("t5u");
      if (id) then
          lcd.drawText(x2, y, "y", SMLSIZE);
      else
          lcd.drawText(x2, y, "n", SMLSIZE);
      end
  #else 
      lcd.drawText(x2, y, "-", SMLSIZE);
  #endif 
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_GetSwitchId], SMLSIZE);
  #ifdef USE_GETSWITCHID
      if (getSwitchId) then
          lcd.drawText(x2, y, "y", SMLSIZE);
      else
          lcd.drawText(x2, y, "n", SMLSIZE);
      end
  #else 
      lcd.drawText(x2, y, "-", SMLSIZE);
  #endif 

  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_GetFieldSL], SMLSIZE);
  local id = getFieldInfo("sl1");
  if (id) then
      lcd.drawText(x2, y, "y", SMLSIZE);
  else
      lcd.drawText(x2, y, "n", SMLSIZE);
  end

  y = widget[W_Y];
  y = y + widget[W_FontHSmall];     
  y = y + widget[W_FontHSmall];     

  lcd.drawText(x3, y, debugText[DEBUG_TEXT_Shm], SMLSIZE);
  #ifdef USE_SHM
  if (getShmVar) then
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else 
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x3, y, debugText[DEBUG_TEXT_StickySwitch], SMLSIZE);
  #ifdef USE_LS_STICKY
  if (setStickySwitch) then
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif 
  
end

local function displayDebugColor(widget) 
  displayDebugBW(widget);
end

if (LCD_W <= 128) then
  initDebugTextBW();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugBW,
    optionString = optionString,
  };
elseif (LCD_W <= 212) then
  initDebugTextBW();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugBW,
    optionString = optionString,
  };
else
  initDebugTextColor();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugColor,
    optionString = optionString,
  };
end
