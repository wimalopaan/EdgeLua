--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../widget.h"

local name = "EL_Con";
local options = {};
local menuState = {1, 1, 1, 0, 0}; -- row, col, page
local buttonState = {0, 0, 0, 0, 0, 0};
local menu = {};
local valuesFileName = nil;
local headers = {};
local queue = nil;
local fsmState = {};
local encoder = nil;
local paramEncoder = nil;
local paramScaler = nil;
local configFSM = nil;
local help = {};

local lastRun = 0;
 
local function create(zone, options)
  load();
  loadLibU();
  collectgarbage();
  
  if (errorCode > 0) then 
    return {}; 
  end
 
  local widget = __libI.initWidget(zone, options);
  collectgarbage();

  TRACE("EL_Con ctreat1");
  if not(__WmSw2Config) then
    local config = __libI.loadConfig();
    if not (config) then
      errorCode = 4;
      return widget;
    end
    __WmSw2Config = __libI.initConfig(config);
  end 
  collectgarbage();

  TRACE("EL_Con ctreat2");

  local map = nil;
  local modInfos = nil;
  local filename = {};
  local exportValues = nil;
  menu, exportValues, filename, map, modInfos = __libI.loadMenu();
  exportValues = nil;

  TRACE("EL_Con ctreat3");

  if not (menu) then
    errorCode = 5;
    return widget;
  end

  TRACE("EL_Con ctreat4");

  encoder, paramScaler, paramEncoder = __libP.getEncoder(__WmSw2Config);
  TRACE("EL_Con ctreat41");
  
  configFSM = __libP.getConfigFSM(__WmSw2Config);
  TRACE("EL_Con ctreat42");

  headers, menu, help, valuesFileName = __libI.initParamMenu(__WmSw2Config, menu, map, modInfos, filename)

  TRACE("EL_Con ctreat5");

#ifdef USE_VALUE_STORAGE
TRACE("valuesFilename:", valuesFileName)
   if (valuesFileName) then
    TRACE("valuesFilename:", valuesFileName)
    __libU.initValues(menu, valuesFileName);
  end
#endif

TRACE("EL_Con ctreat6");

  __libI.initConfigFSM(fsmState);

  __libI = nil; -- free memory

  queue = __libP.Class.Queue.new();

  collectgarbage();

  return widget;
end

local function update(widget, options) 
  widget[W_Options] = options; 
end

local function background(widget)
  if (errorCode == 0) then
    if ((getTime() - lastRun) > 100) then 
      __stopWmSw2 = bit32.band(__stopWmSw2, bit32.bnot(STOPMASK_CONFIG)); 
    end
  end
end

local function refresh(widget, event, touch)
  __libD.updateWidgetDimensions(widget, event);
  if (errorCode == 0) then
    __stopWmSw2 = bit32.bor(__stopWmSw2, STOPMASK_CONFIG);
    lastRun = getTime();
    __libD.processEvents(__WmSw2Config, menu, menuState, event, queue, __libD.selectParamItem);
    __libD.processTouch(menu, menuState, event, touch);
    __libD.processButtons(__WmSw2Config, menu, menuState, buttonState, queue, __libD.selectParamItem);
    local pvalue = __libD.displayParamMenu(__WmSw2Config, widget, menu, headers, menuState, paramScaler, event, help);
    configFSM(__WmSw2Config, menu, headers, menuState, queue, fsmState, encoder, paramEncoder, pvalue);
    #ifdef USE_VALUE_STORAGE
    if (valuesFileName) then
      __libU.saveValues(menu, valuesFileName, menuState);      
    end
    #endif
  else
    lcd.drawText(widget[W_X], widget[W_Y], "Error: " .. errorCode, DBLSIZE);
  end
end
 
return {
  name = name,
  options = options,
  create = create,
  update = update,
  refresh = refresh,
  background = background
};
