---
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../mixer.lh"

local output = { 
   "mod1",
   "mod2",
   "mod3",
   "mod4",
   "mod5"
};

local gvar = 0;
local values = nil;

local function initConfig()
   TRACE("vmap: init: ", __WmMixerConfig);
   if not(__WmMixerConfig) then
      if not __libM then
        loadLibM();
        TRACE("vmap: libM: ", __libM);
        if __libM then
         local config = __libM.loadConfig();
         TRACE("vmap: config: ", config);
         if not(config) then
            errorCode = 4;
            return;
         end
         __WmMixerConfig = __libM.initConfig(config); -- not modify model
         TRACE("vmap initConfig", __WmMixerConfig);
         collectgarbage();
        end
      end
   end

   local backend = __WmMixerConfig[MIXCFG_Backend];   
   local bendcfg = __WmMixerConfig[MIXCFG_Backend_Data][backend];

   if (backend == CFG_BEND_Bus) then
      
   end
   if (backend == CFG_BEND_TipTip) then
      gvar = bendcfg[BEND_TIPTIP_MixerGlobalVariable];
      values = bendcfg[BEND_TIPTIP_Values];
      TRACE("vmap: gvar: ", gvar, values);         
   end
end

if (LCD_W <= 212) then
   GLOBAL_LUA_MIX_VAR = 0;
end
 
local lastValue = 0;
 
local function demux(value)
   local chValues = {0, 0, 0, 0, 0};
   if (value ~= lastValue) then
      TRACE3("vmap value:", value);
      lastValue = value;
   end
   if (values) then
      local chValue = math.min(value % 10, #values);
      value = math.floor(value / 10);
  
      local channel = math.min(value % 10, #chValues);
  
      TRACE3("vmap value 2:", value, channel, chValue);

      if (channel > 0) and (chValue > 0) then
         chValues[channel] = values[chValue] * 10.24;       
         TRACE3("vmap: chValue:", chValue, "chan:", channel, "chValues:", chValues[channel]);         
      end
  
   end   
   return chValues[1], chValues[2], chValues[3], chValues[4], chValues[5];    
end

local function transportGlobalLua()
   return demux(GLOBAL_LUA_MIX_VAR);
end

local function transportGV()
   return demux(model.getGlobalVariable(gvar, 0));
end

local function transportShm()
   return demux(getShmVar(SHM_VMAP_VAR));
end

if (LCD_W <= 212) then
   TRACE("vmap: use transportGlobalLua");
   return {
       init = initConfig,
       output = output,
       run = transportGlobalLua
   };
else
   if (getShmVar) then
      TRACE("vmap: use transportShm");
      return {
        init = initConfig,
        output = output,
        run = transportShm
      };
   else
      TRACE("vmap: use transportGV");
      return {
         init = initConfig,
         output = output,
         run = transportGV
      };
   end
end
