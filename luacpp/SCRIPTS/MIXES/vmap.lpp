---
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../mixer.lh"

local output = { 
   "mod1",
   "mod2",
   "mod3",
   "mod4",
   "mod5"
};

local chValues = {0, 0, 0, 0, 0}; -- outputs

local gvar = 0;
local backend = 0; 
local bendcfg = nil;
local values = nil; -- tiptip
local exportValues = nil; -- bus

local function initConfig()
   TRACE("vmap: init: ", __WmMixerConfig);
   if not(__WmMixerConfig) then
      if not __libM then
        loadLibM();
        TRACE("vmap: libM: ", __libM);
        if __libM then
         local config = __libM.loadConfig();
         TRACE("vmap: config: ", config);
         if not(config) then
            errorCode = 4;
            return;
         end
         __WmMixerConfig = __libM.initConfig(config); -- not modify model
         TRACE("vmap initConfig", __WmMixerConfig);
         collectgarbage();
        end
      end
   end

   backend = __WmMixerConfig[MIXCFG_Backend];   
   bendcfg = __WmMixerConfig[MIXCFG_Backend_Data][backend];

   if (backend == CFG_BEND_Bus) then
      gvar = bendcfg[BEND_BUS_ExportMixerGlobalVariable];
      exportValues = bendcfg[BEND_BUS_ExportValues];
      TRACE("vmap: bus: gvar: ", gvar, exportValues);         
   end
   if (backend == CFG_BEND_TipTip) then
      gvar = bendcfg[BEND_TIPTIP_MixerGlobalVariable];
      values = bendcfg[BEND_TIPTIP_Values];
      TRACE("vmap: tiptip: gvar: ", gvar, values);         
   end
end

if (LCD_W <= 212) then
   GLOBAL_LUA_MIX_VMAP_VAR = 0;
end

local function demuxBendBus(value)
--   local chValues = {0, 0, 0, 0, 0};
   if (exportValues) then
      local state = value % 10; -- (1000 * <export>) + (100 * <function>) + (10 * <module>) + <valueIndex>
      value = math.floor(value / 10);
      local module = value % 10;
      value = math.floor(value / 10);
      local fn = value % 10;
      value = math.floor(value / 10);
      local export = value % 10;

      export = math.min(export, #exportValues);
      local evalues = exportValues[export];
      state = math.min(state, #evalues);

      if (module > 0) and (state > 0) then
         chValues[module] = evalues[state] * 10.24;       
         TRACE3("vmap: chValue:", state, "chan:", module, "chValues:", chValues[module]);         
      end  
   end
   return chValues[1], chValues[2], chValues[3], chValues[4], chValues[5];    
end

local function demuxBendTipTip(value)
--   local chValues = {0, 0, 0, 0, 0};
   if (values) then
      local state = math.min(value % 10, #values); -- (1000 * <export>) + (100 * <function>) + (10 * <module>) + <valueIndex>
      value = math.floor(value / 10);
      local module = math.min(value % 10, #chValues);
      TRACE3("vmap tip m i:", module, state);
      if (module > 0) and (state > 0) then
         chValues[module] = values[state] * 10.24;       
         TRACE3("vmap: chValue:", state, "chan:", module, "chValues:", chValues[module]);         
      end  
   end   
   return chValues[1], chValues[2], chValues[3], chValues[4], chValues[5];    
end

#ifdef DEBUG
local lastValue = 0; -- only for debug
#endif

local function demux(value)
   #ifdef DEBUG
   if (value ~= lastValue) then
      TRACE3("vmap value:", value);
      lastValue = value;
   end
   #endif

   if (backend == 1) then
      return demuxBendBus(value);
   elseif (backend == 3) then
      return demuxBendTipTip(value);      
   end

   return chValues[1], chValues[2], chValues[3], chValues[4], chValues[5];    
end

local function transportGlobalLua()
   return demux(GLOBAL_LUA_MIX_VMAP_VAR);
end

local function transportGV()
   return demux(model.getGlobalVariable(gvar, 0));
end

local function transportShm()
   return demux(getShmVar(SHM_VMAP_VAR));
end

if (LCD_W <= 212) then
   TRACE("vmap: use transportGlobalLua");
   return {
       init = initConfig,
       output = output,
       run = transportGlobalLua
   };
else
   if (getShmVar) then
      TRACE("vmap: use transportShm");
      return {
        init = initConfig,
        output = output,
        run = transportShm
      };
   else
      TRACE("vmap: use transportGV");
      return {
         init = initConfig,
         output = output,
         run = transportGV
      };
   end
end
