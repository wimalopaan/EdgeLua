--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "sort.lh"

#ifdef INCLUDE_ANIMATIONS

local function isEdgeTx()
  local ver, radio, maj, minor, rev, osname = getVersion();
  return osname ~= nil;
end

local function loadAnimations(config)
  local basedir = BASE_DIR .. "/ANIMS/";
  local anims = {};
  if (#model.getInfo().name > 0) then
    local filename = model.getInfo().name .. ".lua";
    local chunk = loadScript(basedir .. filename);
    if (chunk) then
      anims = chunk();
    end
  end
  if not(anims) or (#anims == 0) then
    local filename = "default.lua";
    local chunk = loadScript(basedir .. filename);
    if (chunk) then
      anims = chunk();
    end
  end
  return anims;
end

local function initAnimations(anims)
  local canims = {};
  for ia, anim in ipairs(anims) do
    local canim = {};
    canim[ANIM_Name] = anim.name;

    if not(anim.length) or (anim.length == 0) then
      canim[ANIM_Length] = 0;
    else  
      canim[ANIM_Length] = math.floor(anim.length * 100);
    end

    TRACE("init anim", ia, canim[ANIM_Name], canim[ANIM_Length]);

    local trans = {};
    if (anim.switches) then
      local allTransitions = {};
      for si, s in ipairs(anim.switches) do
        if (s.transitions) then
          for it, t in ipairs(s.transitions) do
            trans = {};
            trans[ANIM_TRANS_Function] = s.fn;
            trans[ANIM_TRANS_Module] = s.module;
            trans[ANIM_TRANS_State] = t.state;
            trans[ANIM_TRANS_Time] = math.floor(t.at * 100);
            trans[ANIM_TRANS_Done] = false;
            ADD(allTransitions, trans);
          end
        elseif (s.sequence) then          
          local t = 0;
          for it, d in ipairs(s.sequence) do
            trans = {};
            trans[ANIM_TRANS_Function] = s.fn;
            trans[ANIM_TRANS_Module] = s.module;
            trans[ANIM_TRANS_State] = d.state;
            trans[ANIM_TRANS_Time] = t;            
            trans[ANIM_TRANS_Done] = false;
            ADD(allTransitions, trans);
            t = t + math.floor(d.duration * 100);
          end
        end
      end
      sort(allTransitions, ANIM_TRANS_Time);
      canim[ANIM_Transitions] = allTransitions;

      -- for ci, tr in ipairs(canim[ANIM_Transitions]) do
      --   TRACE("canim trans", tr[ANIM_TRANS_Function], tr[ANIM_TRANS_Module], tr[ANIM_TRANS_Time], tr[ANIM_TRANS_State]);
      -- end
      ADD(canims, canim);
    end
  end
  TRACE("init anims: number", #canims);
  return canims;
end

local function setItem(fn, module, state, queue)
  TRACE2("setItem", fn, module, state);
  __WmSw2ForeignInput = module * 100 + fn * 10 + state;
  local item= {};
  item[ITEM_Function] = fn;
  item[ITEM_Module] = module;
  item[ITEM_State] = state;
  queue:push(item);
end

local function clearAnim(anim)
  for i, tr in ipairs(anim[ANIM_Transitions]) do
    tr[ANIM_TRANS_Done] = false;
  end
end 

local function runAnimation(anim, state, queue)
  if not(anim) then
    return;
  end
  local t = getTime();
  local wasLastTransition = false;

  if (state[FSMANIM_State] == FSMANIM_STATE_Init) then -- state: init
    __WmSw2Warning1 = "Animation";
    __WmSw2Warning2 = anim[ANIM_Name];
    TRACE("Anim:", anim[ANIM_Name], anim[ANIM_Length], #anim[ANIM_Transitions]);
    state[FSMANIM_State] = FSMANIM_STATE_Run;
    state[FSMANIM_StartTime] = t; -- start of anim
    state[FSMANIM_LastSwitch] = t; -- last seq point
    clearAnim(anim);
  elseif (state[FSMANIM_State] == FSMANIM_STATE_Run) then -- state: run
    local diffTime = t - state[FSMANIM_StartTime];
    __WmSw2Warning1 = "Animation [" .. math.floor(diffTime / 100) .. "/" .. math.floor(anim[2] / 100) .. "]";
    for it, tr in ipairs(anim[ANIM_Transitions]) do
      local fn = tr[ANIM_TRANS_Function];
      local module = tr[ANIM_TRANS_Module];
      if not(tr[ANIM_TRANS_Done]) and (diffTime >= tr[ANIM_TRANS_Time]) then
        tr[ANIM_TRANS_Done] = true;
        setItem(fn, module, tr[ANIM_TRANS_State], queue);
        TRACE("ani setItem: ", fn, module, tr[ANIM_TRANS_State]);
        if (it == #anim[ANIM_Transitions]) then
          wasLastTransition = true;
        end
      end
    end
    state[FSMANIM_LastTime] = t;
    if (anim[ANIM_Length] > 0) and ((t - state[FSMANIM_StartTime]) >= anim[ANIM_Length]) then
      state[FSMANIM_StartTime] = t; -- restart
      state[FSMANIM_LastSwitch] = t;
      TRACE("restart");
      clearAnim(anim);
    end 
    if (anim[ANIM_Length] == 0) and (wasLastTransition) then
      TRACE("stop");
      state[FSMANIM_State] = FSMANIM_STATE_Init;
      state[FSMANIM_ActiveAnim] = 0;
      __WmSw2Warning1 = nil;
      __WmSw2Warning2 = nil;
      return nil;
    end 
  end
  return anim;
end

local function resetState(state)
  local t = getTime();
  state[FSMANIM_LastTime] = t; -- timepoint for statemachine
  state[FSMANIM_State] = FSMANIM_STATE_Init; -- state of statemachine
  state[FSMANIM_StartTime] = t; -- start time of anim
  state[FSMANIM_LastSwitch] = t; -- last sequencepoint start time
end 

local function initAnimationFSM(state)
  resetState(state);
  state[FSMANIM_ActiveAnim] = 0; -- active anim [1...4]
  state[FSMANIM_CursorRow] = 0; -- selection
  state[FSMANIM_CursorRow] = 1;
end

local function drawButtons(anims, rects, state)
  for i, rect in ipairs(rects) do
    if (state[FSMANIM_ActiveAnim] == i) then
      lcd.drawFilledRectangle(rect.xmin, rect.ymin, rect.xmax - rect.xmin + 1, rect.ymax - rect.ymin + 1, COLOR_THEME_ACTIVE);
    else
      if (state[FSMANIM_CursorRow] == i) then
        lcd.drawFilledRectangle(rect.xmin, rect.ymin, rect.xmax - rect.xmin + 1, rect.ymax - rect.ymin + 1, COLOR_THEME_FOCUS);
        lcd.drawRectangle(rect.xmin, rect.ymin, rect.xmax - rect.xmin + 1, rect.ymax - rect.ymin + 1, COLOR_THEME_PRIMARY1);
      else
        lcd.drawFilledRectangle(rect.xmin, rect.ymin, rect.xmax - rect.xmin + 1, rect.ymax - rect.ymin + 1, COLOR_THEME_SECONDARY2);
      end
    end
    lcd.drawText(rect.xmin + 5, rect.ymin + 5, anims[i][ANIM_Name], COLOR_THEME_PRIMARY1);
  end
end


local function covers(touch, item) 
  if ((touch.x >= item.xmin) and (touch.x <= item.xmax)
    and (touch.y >= item.ymin) and (touch.y <= item.ymax)) then
    return true;
  end
  return false;
end

local function processKeyEvents(anims, state, event)
  if (event ==  EVT_VIRTUAL_ENTER) then
    TRACE1("PE2:", state[FSMANIM_ActiveAnim], state[FSMANIM_CursorRow]);
    if (state[FSMANIM_CursorRow] == state[FSMANIM_ActiveAnim]) then
      state[FSMANIM_ActiveAnim] = 0;
      return 0;
    end 
    if (state[FSMANIM_CursorRow]) and (state[FSMANIM_CursorRow] <= #anims) then
      state[FSMANIM_ActiveAnim] = state[FSMANIM_CursorRow] ;
    end
  end
  if (event == EVT_VIRTUAL_INC) then
    TRACE1("PE3");
    if (state[FSMANIM_CursorRow] >= #anims) then 
      state[FSMANIM_CursorRow] = 1;
    else
      state[FSMANIM_CursorRow] = state[FSMANIM_CursorRow] + 1;
    end 
  end
  if (event == EVT_VIRTUAL_DEC) then
    TRACE1("PE3");
    if (state[FSMANIM_CursorRow] <= 1) then
      state[FSMANIM_CursorRow] = #anims;
    else
      state[FSMANIM_CursorRow] = state[FSMANIM_CursorRow] - 1;
    end
  end
end

local function processEvents(anims, rects, state, event, touch)
  if (event == EVT_TOUCH_TAP) then
    for bi, rect in ipairs(rects) do
      if (touch) and (covers(touch, rect)) then
        state[FSMANIM_CursorRow] = bi;
        break;
      end
    end
  end
  processKeyEvents(anims, state, event);
end

local function chooseAnimationBW(config, widget, anims, state, event)
  TRACE3("chooseAnimationBW A");
  if not(anims) or (#anims == 0) then
    return;
  end 

  processKeyEvents(anims, state, event);

  for i, anim in ipairs(anims) do
    local x1 = widget[W_X] + 10;
    local x2 = widget[W_X] + 30;
    local y = widget[W_Y] + i * widget[W_FontHSmall];
    if (i == state[FSMANIM_ActiveAnim]) then
      if (i == state[FSMANIM_CursorRow]) then
        lcd.drawText(x1, y, "[x]", SMLSIZE + INVERS);
      else
        lcd.drawText(x1, y, "[x]", SMLSIZE);
      end 
      lcd.drawText(x2, y, anim[ANIM_Name], SMLSIZE);
    else
      if (i == state[FSMANIM_CursorRow]) then
        lcd.drawText(x1, y, "[ ]", SMLSIZE + INVERS);
      else
        lcd.drawText(x1, y, "[ ]", SMLSIZE);
      end 
    end
    lcd.drawText(x2, y, anim[ANIM_Name], SMLSIZE);
  end
  TRACE3("chooseAnimationBW E");
  if (state[FSMANIM_ActiveAnim] > 0) then
    return anims[state[FSMANIM_ActiveAnim]];
  end
  return nil;
end 

local function chooseAnimationNoTheme(config, widget, anims, state, event, touch)
  TRACE3("chooseAnimationNoTheme A");
  if not(anims) or (#anims == 0) then
    return;
  end 

  processKeyEvents(anims, state, event);

  for i, anim in ipairs(anims) do
    local x1 = widget[W_X] + 10;
    local x2 = widget[W_X] + 30;
    local y = widget[W_Y] + i * 2 * widget[W_FontHSmall];
    if (i == state[FSMANIM_ActiveAnim]) then
      if (i == state[FSMANIM_CursorRow]) then
        lcd.drawText(x1, y, "[x]", SMLSIZE + INVERS);
      else
        lcd.drawText(x1, y, "[x]", SMLSIZE);
      end 
      lcd.drawText(x2, y, anim[ANIM_Name], SMLSIZE);
    else
      if (i == state[FSMANIM_CursorRow]) then
        lcd.drawText(x1, y, "[ ]", SMLSIZE + INVERS);
      else
        lcd.drawText(x1, y, "[ ]", SMLSIZE);
      end 
    end
    lcd.drawText(x2, y, anim[ANIM_Name], SMLSIZE);
  end
  if (state[FSMANIM_ActiveAnim] > 0) then
    return anims[state[FSMANIM_ActiveAnim]];
  end
  return nil;
end

local function chooseAnimation(config, widget, anims, state, event, touch, png)
  lcd.clear();
  local rects = {};
  local bh = 1.5 * widget[W_FontHLarge];
  local border_h = 40;
  local bw = widget[W_Width] - 2 * border_h;;
  local vs = 5;

  TRACE3("chooseAnimation", config, widget, anims, state, event, touch);

  if (widget[W_Width] <= (LCD_W / 2)) then
    if (png) then
      lcd.drawBitmap(png, widget[W_X], widget[W_Y]);        
    end
    lcd.drawText(widget[W_X] + 60, widget[W_Y], "Animationen", MIDSIZE);
    return;
  end


  if not(anims) then
    return;
  end
  if (#anims == 0) then
    lcd.drawText(widget[W_X], widget[W_Y] + widget[W_Height] / 2 - widget[W_FontHLarge], "No animations", DBLSIZE);
  elseif (#anims == 1) then
    local rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - bh / 2, ymax = widget[W_Y] + widget[W_Height] / 2 + bh / 2};
    rects[1] = rect;
  elseif (#anims == 2) then
    local rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - bh - vs, ymax = widget[W_Y] + widget[W_Height] / 2 - vs};
    rects[1] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 + vs, ymax = widget[W_Y] + widget[W_Height] / 2 + bh + vs};
    rects[2] = rect;
  elseif (#anims == 3) then
    local rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - bh / 2, ymax = widget[W_Y] + widget[W_Height] / 2 + bh / 2};
    rects[1] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - 3 * bh / 2 - vs, ymax = widget[W_Y] + widget[W_Height] / 2 - bh / 2 - vs};
    rects[2] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 + bh / 2 + vs, ymax = widget[W_Y] + widget[W_Height] / 2 + 3 * bh / 2 + vs};
    rects[3] = rect;
  elseif (#anims >= 4) then
    local rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - 2 * bh - 3 * vs / 2, ymax = widget[W_Y] + widget[W_Height] / 2 - bh - 3 * vs / 2};
    rects[1] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 - bh - vs / 2, ymax = widget[W_Y] + widget[W_Height] / 2 - vs / 2};
    rects[2] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 + vs / 2, ymax = widget[W_Y] + widget[W_Height] / 2 + bh + vs / 2};
    rects[3] = rect;
    rect = {xmin = widget[W_X] + border_h, xmax = widget[W_X] + bw,
      ymin = widget[W_Y] + widget[W_Height] / 2 + bh + 3 * vs / 2, ymax = widget[W_Y] + widget[W_Height] / 2 + 2 * bh + 3 * vs / 2};
    rects[4] = rect;
  end

  drawButtons(anims, rects, state);
  processEvents(anims, rects, state, event, touch);

  if (state[FSMANIM_ActiveAnim] > 0) then
    return anims[state[FSMANIM_ActiveAnim]];
  else
    __WmSw2Warning1 = nil;
    __WmSw2Warning2 = nil;
    return nil;
  end

end

if (LCD_W <= 128) then
  return {
    loadAnimations = loadAnimations,
    initAnimations = initAnimations,
    runAnimation = runAnimation,
    chooseAnimation = chooseAnimationBW,
    initAnimationFSM = initAnimationFSM,
  };
elseif (LCD_W <= 212) then
  return {
    loadAnimations = loadAnimations,
    initAnimations = initAnimations,
    runAnimation = runAnimation,
    chooseAnimation = chooseAnimationBW,
    initAnimationFSM = initAnimationFSM,
  };
else  
  if (isEdgeTx()) then
    return {
      loadAnimations = loadAnimations,
      initAnimations = initAnimations,
      runAnimation = runAnimation,
      chooseAnimation = chooseAnimation,
      initAnimationFSM = initAnimationFSM,
    };
  else
    return {
      loadAnimations = loadAnimations,
      initAnimations = initAnimations,
      runAnimation = runAnimation,
      chooseAnimation = chooseAnimationNoTheme,
      initAnimationFSM = initAnimationFSM,
    };
  end
end

#endif 
