--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../global.h"

#ifndef USE_NEW_STRING_OPTION
local function isDigit(v)
  return (v >= string.byte("0")) and (v <= string.byte("9"));
end

local function isLetter(v)
  return (v >= string.byte("A") and (v <= string.byte("Z"))) or (v >= string.byte("a") and (v <= string.byte("z")));
end

local function nthChar(n, v)
  local c = bit32.extract(v, n * 8, 8);
  if (isDigit(c) or isLetter(c)) then
    return string.char(c);
  end
  return nil;
end

local function optionString(option)
  local s = "";
  for i = 0,3 do
    local c = nthChar(i, option);
    if (c) then
      s = s .. c;
    else
      return s;
    end;
  end
  return s
end
#endif

-- local function serialize(table, filename) 
--     if type(table) == "table" then
--         io.write("{\n")
--         for k,v in pairs(o) do
--           io.write("  ", k, " = ")
--           serialize(v)
--           io.write(",\n")
--         end
--         io.write("}\n")
--       else
--         error("cannot serialize a " .. type(o))
--       end
-- end

#ifdef USE_VALUE_STORAGE
local function appendToFile(file, values) 
  TRACE("appendToFile", file);
  io.write(file, "\t{");
  for i, v in ipairs(values) do
    io.write(file, v .. ",");
  end
  io.write(file, "},\n");
end

local function saveValues(menu, filename, state)
  if (state[MENUSTATE_Dirty]) then
    TRACE("saveValues dirty");
    state[MENUSTATE_Dirty] = false;
  
    local file = io.open(filename, "w");
    if (file) then
      io.write(file, "return {\n");
      for ip, page in ipairs(menu) do
        for il, pline in ipairs(page) do
          local pitem = pline[PLINE_Item];
          TRACE("saveValues", pitem[PITEM_Name]);
          appendToFile(file, pline[PLINE_Values]);
        end
      end
      io.write(file, "};\n");
      io.close(file);
    else
      TRACE("saveValue open failed:", filename);
    end
  end
end

local function initValues(menu, filename)
  TRACE("initValues", filename);
  local data = loadfile(filename);
  TRACE("initValues", data);
  if (data) then
    local table = data();
    if (table) then
      TRACE("initValues", #table);
      local lineNumber = 1;
      for ip, page in ipairs(menu) do
        for il, pline in ipairs(page) do
          local pitem = pline[PLINE_Item];
          if not(table[lineNumber]) then
            TRACE("wrong number of lines in value table");
            return false;
          else
            if (#table[lineNumber] == #pline[PLINE_Values]) then
              TRACE("initValues assign", pitem[PITEM_Name]);
              pline[PLINE_Values] = table[lineNumber];
            else
              TRACE("initValues no match", pitem[PITEM_Name]);
            end          
          end
          lineNumber = lineNumber + 1;
        end
      end        
    end
  end
  return true;
end
#endif 

local debugText = {};

local function initDebugTextBW() 
  debugText[DEBUG_TEXT_Version] = "Vers:";
  debugText[DEBUG_TEXT_GetFieldSL] = "GFLS:";
  debugText[DEBUG_TEXT_GetSwitchId] = "SwId:";
  debugText[DEBUG_TEXT_Radio] = "Rad:";
  debugText[DEBUG_TEXT_Shm] = "Shm:";
  debugText[DEBUG_TEXT_StickySwitch] = "SSw:";
  debugText[DEBUG_TEXT_TrimSwitchId] = "TrSw:";
  debugText[DEBUG_TEXT_ValueStorage] = "VSto:";
  debugText[DEBUG_TEXT_Filename] = "FNam:";
  debugText[DEBUG_TEXT_StringOption] = "SOpt:";
  debugText[DEBUG_TEXT_FuncNames] = "Func:";
end

local function initDebugTextColor() 
  debugText[DEBUG_TEXT_Version] = "Version:";
  debugText[DEBUG_TEXT_GetFieldSL] = "SwitchID LS:";
  debugText[DEBUG_TEXT_GetSwitchId] = "GetSwitchId:";
  debugText[DEBUG_TEXT_Radio] = "Radio:";
  debugText[DEBUG_TEXT_Shm] = "SharedMem:";
  debugText[DEBUG_TEXT_StickySwitch] = "SetStickySw:";
  debugText[DEBUG_TEXT_TrimSwitchId] = "TrimSwitch:";
  debugText[DEBUG_TEXT_ValueStorage] = "ValueStorage:";
  debugText[DEBUG_TEXT_Filename] = "ModelFileName:";
  debugText[DEBUG_TEXT_StringOption] = "StringOption:";
  debugText[DEBUG_TEXT_FuncNames] = "FunctionNames:";
end

local function displayDebugBW(widget) 
  local y = widget[W_Y];
  local x1 = widget[W_X];
  local x2 = x1 + widget[W_Width] / 4;
  local x3 = x1 + widget[W_Width] / 2;
  local x4 = x1 + 3 * widget[W_Width] / 4;
  #ifdef DEBUG
      lcd.drawText(x1, y, debugText[DEBUG_TEXT_Version] .. VERSION .. " (dbg)", SMLSIZE);
  #else
      lcd.drawText(x1, y, debugText[DEBUG_TEXT_Version] .. VERSION, SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_Radio] , SMLSIZE);    
  local ver, radio, maj, minor, rev, osname = getVersion();
  if (osname) then
      lcd.drawText(x2, y, "ETx " .. radio .. " " .. maj .. "." .. minor .. "." .. rev, SMLSIZE);
  else
      lcd.drawText(x2, y, "OTx " .. radio .. " " .. maj .. "." .. minor .. "." .. rev, SMLSIZE);
  end
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_ValueStorage], SMLSIZE);
  #ifdef USE_VALUE_STORAGE
      lcd.drawText(x2, y, "y", SMLSIZE);
  #else 
      lcd.drawText(x2, y, "n", SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_TrimSwitchId], SMLSIZE);
  #ifdef USE_TRIM_NAMES
      local id = getFieldInfo("t5u");
      if (id) then
          lcd.drawText(x2, y, "y", SMLSIZE);
      else
          lcd.drawText(x2, y, "n", SMLSIZE);
      end
  #else 
      lcd.drawText(x2, y, "-", SMLSIZE);
  #endif 
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_GetSwitchId], SMLSIZE);
  #ifdef USE_GETSWITCHID
      if (getSwitchIndex) then -- getSwitchName(), getSwitchValue(), getPhysicalSwitches(), SWITCH_COUNT
          lcd.drawText(x2, y, "y", SMLSIZE);
      else
          lcd.drawText(x2, y, "n", SMLSIZE);
      end
  #else 
      lcd.drawText(x2, y, "-", SMLSIZE);
  #endif 

  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x1, y, debugText[DEBUG_TEXT_GetFieldSL], SMLSIZE);
  local id = getFieldInfo("sl1");
  if (id) then
      lcd.drawText(x2, y, "y", SMLSIZE);
  else
      lcd.drawText(x2, y, "n", SMLSIZE);
  end

  y = widget[W_Y];
  y = y + widget[W_FontHSmall];     
  y = y + widget[W_FontHSmall];     

  lcd.drawText(x3, y, debugText[DEBUG_TEXT_Shm], SMLSIZE);
  #ifdef USE_SHM
  if (getShmVar) and (setShmVar) then
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else 
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif
  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x3, y, debugText[DEBUG_TEXT_StickySwitch], SMLSIZE);
  #ifdef USE_LS_STICKY
  if (setStickySwitch) then -- getLogicalSwitchValue()
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif 

  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x3, y, debugText[DEBUG_TEXT_Filename], SMLSIZE);
  #ifdef USE_MODEL_FILENAME
  if (model.getInfo().filename) then 
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif 

  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x3, y, debugText[DEBUG_TEXT_StringOption], SMLSIZE);
  #ifdef USE_NEW_STRING_OPTION
  if (widget[W_Options]) then
    local opt = widget[W_Options].Test;
    if (type(opt) == "string") then 
      lcd.drawText(x4, y, "y", SMLSIZE);
    else
      lcd.drawText(x4, y, "n", SMLSIZE);
    end      
  else
    lcd.drawText(x4, y, "na", SMLSIZE);
  end
  #else
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif 

  y = y + widget[W_FontHSmall]; 
  lcd.drawText(x3, y, debugText[DEBUG_TEXT_FuncNames], SMLSIZE);
  #ifdef USE_FUNCTION_NAMES
  if (LS_FUNC_VEQUAL) then 
      lcd.drawText(x4, y, "y", SMLSIZE);
  else
      lcd.drawText(x4, y, "n", SMLSIZE);
  end
  #else
      lcd.drawText(x4, y, "-", SMLSIZE);
  #endif 

end

local function displayDebugColor(widget) 
  displayDebugBW(widget);
end

if (LCD_W <= 128) then
  initDebugTextBW();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugBW,
    optionString = optionString,
  };
elseif (LCD_W <= 212) then
  initDebugTextBW();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugBW,
    optionString = optionString,
  };
else
  initDebugTextColor();
  return {
    saveValues = saveValues,
    initValues = initValues,
    displayDebug = displayDebugColor,
    optionString = optionString,
  };
end
