--
-- EdgeLUA - EdgeTx / OpenTx Extensions 
-- Copyright (C) 2021 Wilhelm Meier <wilhelm.wm.meier@googlemail.com>
--
-- This work is licensed under the Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International License. 
-- To view a copy of this license, visit http://creativecommons.org/licenses/by-nc-nd/4.0/ 
-- or send a letter to Creative Commons, PO Box 1866, Mountain View, CA 94042, USA.

-- IMPORTANT
-- Please note that the above license also covers the transfer protocol used and the encoding scheme and 
-- all further principals of tranferring state and other information.

#include "../../widget.h"

local bmpExpandSmall = nil;

local name = "EL_Test";
local options = {
  {"Test", STRING}
};

local function create(zone, options)
  load();
  loadLibU();
  collectgarbage();
  
  if (errorCode > 0) then
    return {};
  end

  local widget = __libI.initWidget(zone, options);
  collectgarbage();

  if not(__WmSw2Config) then
    local config = __libI.loadConfig();
    if not(config) then
      errorCode = 4;
      return widget;
    end
    __WmSw2Config = __libI.initConfig(config, true);
  end 
  collectgarbage();

  __libI = nil; -- free memory

  collectgarbage();

  if (CHAR_TRIM) and (getSwitchIndex) then
    local t5u = getSwitchIndex(CHAR_TRIM .. "5u");
    TRACE("5u", t5u);
  else
    TRACE("5u", "no char constants");      
  end

  if (getPhysicalSwitches) then
    local sws = getPhysicalSwitches();
    TRACE("getPhysicalSwitches N", #sws);
    for i, sw in ipairs(sws) do
      TRACE("getPhysicalSwitches", i, sw[1], sw[2]);
    end   
  end

  bmpExpandSmall = Bitmap.open(BASE_DIR .. "/ICONS/48px/expand.png");

  widget.sendDataLastTime = getTime();

  return widget;
end

local function update(widget, options)
  widget[W_Options] = options;
end

local function background(widget)
  if (errorCode == 0) then
  end
end

CRSF_FRAMETYPE_DISPLAYPORT_CMD      = 0x7D
CRSF_DISPLAYPORT_SUBCMD_UPDATE      = 0x01
CRSF_DISPLAYPORT_SUBCMD_CLEAR       = 0x02
CRSF_DISPLAYPORT_SUBCMD_OPEN        = 0x03
CRSF_DISPLAYPORT_SUBCMD_CLOSE       = 0x04
CRSF_DISPLAYPORT_SUBCMD_POLL        = 0x05
CRSF_ADDRESS_BETAFLIGHT             = 0xC8
CRSF_ADDRESS_TRANSMITTER            = 0xEA

CRSF_FRAMETYPE_CMD      = 0x32
CRSF_ADDRESS_CC         = 0xA0


local function sendData(widget) 
  local t = getTime();
  if ((t - widget.sendDataLastTime) > 10) then -- 100ms
    widget.sendDataLastTime = t;
    TRACE("sendData");

    local payloadOut = { CRSF_ADDRESS_CC, CRSF_ADDRESS_TRANSMITTER, 0x05, t};
    crossfireTelemetryPush(CRSF_FRAMETYPE_CMD, payloadOut);

  end
end

local function refresh(widget, event, touch)
  __libD.updateWidgetDimensions(widget, event);
  if (errorCode == 0) then
    if (widget[W_Width] <= (LCD_W / 2)) then
      if (bmpExpandSmall) then
        lcd.drawBitmap(bmpExpandSmall, widget[W_X], widget[W_Y]);        
      end
      lcd.drawText(widget[W_X] + 60, widget[W_Y], "Sys-Infos", MIDSIZE);
    else
      __libU.displayDebug(widget);
      sendData(widget);
    end
  else
    lcd.drawText(widget[W_X], widget[W_Y], "Error: " .. errorCode, DBLSIZE);
  end
end

return { 
    name=name,
    options=options,
    create=create,
    update=update,
    refresh=refresh,
    background=background
};

